=begin
#Certificate Manager Service API

#Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module IonoscloudCertManager
  class CertificatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Certificate by ID
    # Deletes a certificate specified by its ID.
    # @param certificate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def certificates_delete(certificate_id, opts = {})
      certificates_delete_with_http_info(certificate_id, opts)
      nil
    end

    # Delete a Certificate by ID
    # Deletes a certificate specified by its ID.
    # @param certificate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def certificates_delete_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.certificates_delete ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CertificatesApi.certificates_delete"
      end
      # resource path
      local_var_path = '/certificatemanager/certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"CertificatesApi.certificates_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#certificates_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Certificates
    # Retrieves all available certificates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset &#39;Limit&#39; and &#39;Offset&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
    # @option opts [String] :limit &#39;Limit&#39; and &#39;Offset&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both &#39;Offset&#39; and &#39;Limit&#39;are specified, the offset lines are skipped before counting the returned limit lines.
    # @return [CertificateCollectionDto]
    def certificates_get(opts = {})
      data, _status_code, _headers = certificates_get_with_http_info(opts)
      data
    end

    # Get Certificates
    # Retrieves all available certificates.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset &#39;Limit&#39; and &#39;Offset&#39; are optional; you can use these filter parameters to retrieve only part of the results obtained by a request.  Offset is the first element (from the complete list of elements) to be included in the response.
    # @option opts [String] :limit &#39;Limit&#39; and &#39;Offset&#39; are optional; you can use these filter parameters to retrieve only part of the results of a query.  If both &#39;Offset&#39; and &#39;Limit&#39;are specified, the offset lines are skipped before counting the returned limit lines.
    # @return [Array<(CertificateCollectionDto, Integer, Hash)>] CertificateCollectionDto data, response status code and response headers
    def certificates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.certificates_get ...'
      end
      # resource path
      local_var_path = '/certificatemanager/certificates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CertificateCollectionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"CertificatesApi.certificates_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#certificates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Certificate by ID
    # Retrieves a certificate specified by its ID.
    # @param certificate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [CertificateDto]
    def certificates_get_by_id(certificate_id, opts = {})
      data, _status_code, _headers = certificates_get_by_id_with_http_info(certificate_id, opts)
      data
    end

    # Get a Certificate by ID
    # Retrieves a certificate specified by its ID.
    # @param certificate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateDto, Integer, Hash)>] CertificateDto data, response status code and response headers
    def certificates_get_by_id_with_http_info(certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.certificates_get_by_id ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CertificatesApi.certificates_get_by_id"
      end
      # resource path
      local_var_path = '/certificatemanager/certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CertificateDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"CertificatesApi.certificates_get_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#certificates_get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Certificate Name by ID
    # Updates the name of the specified certificate.
    # @param certificate_id [String] 
    # @param certificate_patch_dto [CertificatePatchDto] 
    # @param [Hash] opts the optional parameters
    # @return [CertificateDto]
    def certificates_patch(certificate_id, certificate_patch_dto, opts = {})
      data, _status_code, _headers = certificates_patch_with_http_info(certificate_id, certificate_patch_dto, opts)
      data
    end

    # Update a Certificate Name by ID
    # Updates the name of the specified certificate.
    # @param certificate_id [String] 
    # @param certificate_patch_dto [CertificatePatchDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateDto, Integer, Hash)>] CertificateDto data, response status code and response headers
    def certificates_patch_with_http_info(certificate_id, certificate_patch_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.certificates_patch ...'
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CertificatesApi.certificates_patch"
      end
      # verify the required parameter 'certificate_patch_dto' is set
      if @api_client.config.client_side_validation && certificate_patch_dto.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_patch_dto' when calling CertificatesApi.certificates_patch"
      end
      # resource path
      local_var_path = '/certificatemanager/certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(certificate_patch_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CertificateDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"CertificatesApi.certificates_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#certificates_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Certificate
    # Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
    # @param certificate_post_dto [CertificatePostDto] 
    # @param [Hash] opts the optional parameters
    # @return [CertificateDto]
    def certificates_post(certificate_post_dto, opts = {})
      data, _status_code, _headers = certificates_post_with_http_info(certificate_post_dto, opts)
      data
    end

    # Add a New Certificate
    # Adds a new PEM (Privacy Enhanced Mail) file that is used to store SSL certificates and their associated private keys.
    # @param certificate_post_dto [CertificatePostDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CertificateDto, Integer, Hash)>] CertificateDto data, response status code and response headers
    def certificates_post_with_http_info(certificate_post_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificatesApi.certificates_post ...'
      end
      # verify the required parameter 'certificate_post_dto' is set
      if @api_client.config.client_side_validation && certificate_post_dto.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_post_dto' when calling CertificatesApi.certificates_post"
      end
      # resource path
      local_var_path = '/certificatemanager/certificates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(certificate_post_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'CertificateDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"CertificatesApi.certificates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificatesApi#certificates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
